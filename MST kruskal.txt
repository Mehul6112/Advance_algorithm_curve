#include <iostream>
#include <vector>
#include <algorithm> // for sort()

using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Function to compare two edges based on their weights
bool compareEdges(const Edge &e1, const Edge &e2) {
    return e1.weight < e2.weight;
}

// Disjoint Set (Union-Find) Structure
class DisjointSet {
private:
    vector<int> parent, rank;

public:
    // Constructor: initialize parent and rank
    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) {
            parent[i] = i; // Initially, each node is its own parent
        }
    }

    // Find the root of the set containing 'u' (with path compression)
    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]); // Path compression
        }
        return parent[u];
    }

    // Union two sets by rank
    void unionSets(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Kruskal's algorithm to find the MST
void kruskalMST(int V, vector<Edge> &edges) {
    // Sort edges by weight
    sort(edges.begin(), edges.end(), compareEdges);

    DisjointSet ds(V);

    vector<Edge> mst; // To store the edges of the MST
    int mstWeight = 0;

    for (const auto &edge : edges) {
        int rootSrc = ds.find(edge.src);
        int rootDest = ds.find(edge.dest);

        // If including this edge doesn't form a cycle
        if (rootSrc != rootDest) {
            mst.push_back(edge);
            mstWeight += edge.weight;
            ds.unionSets(rootSrc, rootDest);
        }
    }

    // Print the MST
    cout << "Edges in the Minimum Spanning Tree:\n";
    for (const auto &edge : mst) {
        cout << edge.src << " -- " << edge.dest << " == " << edge.weight << endl;
    }
    cout << "Total weight of the MST: " << mstWeight << endl;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<Edge> edges(E);
    cout << "Enter the edges (source, destination, weight):\n";
    for (int i = 0; i < E; ++i) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    // Find the MST
    kruskalMST(V, edges);

    return 0;
}
